library(tidyverse)
library(mgcv)
library(splines)
wage_data <- read_csv("../data/adult-training.csv")
NAMES(wage_data)
names(wage_data)
install.packages("ISLR")
library(ISLR)
wage_data <- Wage
quad_reg_fit <- lm(wage~age+age_2+age_3+age_4,
data=wage_data_edit)
wage_data_edit <- wage_data %>%
mutate(age_2=age^2,
age_3=age^3,
age_4=age^4)
quad_reg_fit <- lm(wage~age+age_2+age_3+age_4,
data=wage_data_edit)
predict(quad_reg_fit)
wage_data_edit$predict_wage <- predict(quad_reg_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
geom_path(y=predict_wage)
wage_data_edit$predict_wage <- predict(quad_reg_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
geom_path(y=predict_wage)
wage_data_edit$predict_wage
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
geom_path(mapping=aes(y=predict_wage))
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
geom_line(mapping=aes(y=predict_wage))
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
geom_line(mapping=aes(y=predict_wage), color="blue")
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=4)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
quad_reg_fit <- lm(wage~poly(age, 4),
data=wage_data_edit)
quad_reg_fit
predict(quad_reg_fit)
wage_data_edit$predict_wage <- predict(quad_reg_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Quadratic polynomial regression: fitted line computed using poly()")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
degrees <- c(1,2,3,4,5,6,7,8,9,10)
poly_reg_fit <- list()
residuals_wages^2
residuals_wages <- wage_data_edit$wage-predict_wages
predict_wages <- predict(poly_reg_fit[[i]])
i
i=1
poly_reg_fit[[i]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_edit)
predict_wages <- predict(poly_reg_fit[[i]])
residuals_wages <- wage_data_edit$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
rmse_poly_reg
mae_poly_reg <- mean(abs(residuals_wages))
mae_poly_reg
(mean(residuals_wages^2)
mean(residuals_wages^2)
## Set degrees being considered:
degrees <- c(1,2,3,4,5,6,7,8,9,10)
poly_reg_fit <- list()
error_rates_degrees <- list()
# Fit model for each degree considered, compute RMSE (on training in this ex.)
for(i in 1:length(degrees)){
poly_reg_fit[[i]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_edit)
predict_wages <- predict(poly_reg_fit[[i]])
residuals_wages <- wage_data_edit$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[i]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i])
}
error_rates_degrees
error_rates_degrees[[1]]
error_rates_degrees[[2]]
error_rates_degrees[[3]]
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
error_rates_degrees_df
degrees <- 1:20
poly_reg_fit <- list()
error_rates_degrees <- list()
# Fit model for each degree considered, compute RMSE (on training in this ex.)
for(i in 1:length(degrees)){
poly_reg_fit[[i]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_edit)
predict_wages <- predict(poly_reg_fit[[i]])
residuals_wages <- wage_data_edit$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[i]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i])
}
# Bind all degree-specific results together into single data frame/table
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
error_rates_degrees_df
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE))+
geom_point()+
geom_line()
library(caret)
tt_indicies <- createDataPartition(y=wage_data_edit$wage, p=0.6)
ftable(tt_indicies)
tt_indicies
length(tt_indicies)
tt_indicies <- createDataPartition(y=wage_data_edit$wage, p=0.6, list = FALSE)
length(tt_indicies)
dim(wage_data_edit)
wage_data_test <- wage_data[-tt_indicies,]
poly_reg_fit <- list()
error_rates_degrees <- list()
tt_indicies <- createDataPartition(y=wage_data_edit$wage, p=0.6, list = FALSE)
wage_data_train <- wage_data[tt_indicies,]
wage_data_test <- wage_data[-tt_indicies,]
for(i in 1:length(degrees)){
poly_reg_fit[[i]] <- lm(wage~poly(age, degrees[i]),
data=wage_data_train)
predict_wages <- predict(poly_reg_fit[[i]], newdata = wage_data_test)
residuals_wages <- wage_data_test$wage-predict_wages
rmse_poly_reg <- sqrt(mean(residuals_wages^2))
mae_poly_reg <- mean(abs(residuals_wages))
# Save in data frame
error_rates_degrees[[i]] <-
data.frame("RMSE"=rmse_poly_reg,
"MAE"=mae_poly_reg,
"degree"=degrees[i])
}
error_rates_degrees_df <- do.call("rbind", error_rates_degrees)
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE))+
geom_point()+
geom_line()+
labs(title="RMSE (Root Mean Squared Error) by degree on test set")
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE))+
geom_point()+
geom_line()+
geom_hline(yintercept = min(error_rates_degrees_df$RMSE))+
labs(title="RMSE (Root Mean Squared Error) by degree on test set")+
theme_bw()
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE))+
geom_point()+
geom_line()+
geom_hline(yintercept = min(error_rates_degrees_df$RMSE,
linetype="dashed", color="red"))+
labs(title="RMSE (Root Mean Squared Error) by degree on test set")+
theme_bw()
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE))+
geom_point()+
geom_line()+
geom_hline(yintercept = min(error_rates_degrees_df$RMSE),
linetype="dashed", color="red")+
labs(title="RMSE (Root Mean Squared Error) by degree on test set")+
theme_bw()
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE))+
geom_point()+
geom_line()+
geom_hline(yintercept = min(error_rates_degrees_df$RMSE),
linetype="dashed", color="red")+
geom_vline(xintercept = which(min(error_rates_degrees_df$RMSE)),
linetype="dashed", color="red")
ggplot(data=error_rates_degrees_df,
mapping=aes(x=degrees, y=RMSE))+
geom_point()+
geom_line()+
geom_hline(yintercept = min(error_rates_degrees_df$RMSE),
linetype="dashed", color="red")+
geom_vline(xintercept =
which(error_rates_degrees_df$RMSE==min(error_rates_degrees_df$RMSE)),
linetype="dashed", color="red")
labs(title="RMSE (Root Mean Squared Error) by degree on test set")+
theme_bw()
names(wage_data)
View(wage_data)
wage_data_edit <- wage_data %>%
mutate(year_2005 = I(year<2005))
wage_data_edit$year_2005
wage_data_edit <- wage_data %>%
mutate(year_2005 = as.numeric(I(year<2005)))
wage_data_edit$year_2005
names(wage_data_edit)
piecewise_int_fit <-
lm(wage~year_2005+age+year_2005*age,
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(piecewise_int_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage, color=year_2005))+
geom_point()+
labs(title="Piecewise w/ linear interaction: fitted line computed 'by hand'")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage, color=year_2005))+
geom_point()+
labs(title="Piecewise w/ linear interaction: fitted line computed 'by hand'")+
geom_line(mapping=aes(y=predict_wage),
size=2)
wage_data_edit <- wage_data %>%
mutate(year_2005 = factor(as.numeric(I(year<2005))))
# Use interaction terms to have separate slopes per year born group
# We will use linear relationship for simplicity
piecewise_int_fit <-
lm(wage~year_2005+age+year_2005*age,
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(piecewise_int_fit)
# Plot lines of best fit
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage, color=year_2005))+
geom_point()+
labs(title="Piecewise w/ linear interaction: fitted line computed 'by hand'")+
geom_line(mapping=aes(y=predict_wage),
size=2)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage, color=year_2005))+
geom_point()+
labs(title="Piecewise w/ linear interaction: fitted line computed 'by hand'")+
geom_line(mapping=aes(y=predict_wage),
size=2)+
theme_bw()
cbp1 <- c("#009E73", "#E69F00")
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage, color=year_2005))+
geom_point()+
labs(title="Piecewise w/ linear interaction: fitted line computed 'by hand'")+
geom_line(mapping=aes(y=predict_wage),
size=2)+
scale_colour_manual(values=cbp1)+
theme_bw()
wage_data_edit <- wage_data %>%
mutate(age_basis_2 = ifelse(age<50, 0, age-50))
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Linear spline regression: fitted line computed 'by hand'")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
wage_data_edit$predict_wage <- predict(linear_spline_fit)
# By hand, single knot at 50
wage_data_edit <- wage_data %>%
mutate(age_basis_2 = ifelse(age<50, 0, age-50))
# Use interaction terms to have separate slopes per year born group
# We will use linear relationship for simplicity
linear_spline_fit <-
lm(wage~age+age_basis_2,
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(linear_spline_fit)
# Plot lines of best fit
# Add color-blind friendly color scale
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Linear spline regression: fitted line computed 'by hand'")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
# Sample isn't longitudinal -> age and year essentially identical (example just for illustration)
# Using bs function
linear_spline_fit <-
lm(wage~bs(age, knots = 50, degree=1),
data=wage_data_edit)
linear_spline_fit
wage_data_edit$predict_wage <- predict(linear_spline_fit)
# Plot lines of best fit
# Add color-blind friendly color scale
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Linear spline regression: using bs function")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
wage_data_edit <- wage_data %>%
mutate(age_2 = age^2,
age_3 = age^3,
age_basis_4 = ifelse(age<50, 0, (age-50)^3))
# Use interaction terms to have separate slopes per year born group
# We will use linear relationship for simplicity
cubic_spline_fit <-
lm(wage~age+age_2+age_3+age_basis_4,
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(cubic_spline_fit)
# Plot lines of best fit
# Add color-blind friendly color scale
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Cubic spline regression: fitted line computed 'by hand'")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
# Using bs function
cubic_spline_fit <-
lm(wage~bs(age, knots = 50, degree=3),
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(cubic_spline_fit)
# Plot lines of best fit
# Add color-blind friendly color scale
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Cubic spline regression: using bs function")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
# Fit using ns function (won't do by hand, not necessary)
natural_cubic_spline_fit <-
lm(wage~ns(age, knots=c(50)),
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(cubic_spline_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Cubic spline regression: using bs function")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
natural_cubic_spline_fit <-
lm(wage~ns(age, knots=c(30, 50, 60)),
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(cubic_spline_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Natural Cubic spline regression: single knot")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
?ns
natural_cubic_spline_fit <-
lm(wage~ns(age, df=3),
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(cubic_spline_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Natural Cubic spline regression: auto. knots")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
## 2 Automated knot locations
natural_cubic_spline_fit <-
lm(wage~ns(age, df=10),
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(cubic_spline_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Natural Cubic spline regression: auto. knots")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
natural_cubic_spline_fit <-
lm(wage~ns(age, df=1),
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(cubic_spline_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Natural Cubic spline regression: auto. knots")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
natural_cubic_spline_fit <-
lm(wage~ns(age, knots=c(50)),
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(natural_cubic_spline_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Natural Cubic spline regression: single knot")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
natural_cubic_spline_fit <-
lm(wage~ns(age, knots=c(30, 50, 60)),
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(natural_cubic_spline_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Natural Cubic spline regression: many knots")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
natural_cubic_spline_fit <-
lm(wage~ns(age, df=1),
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(natural_cubic_spline_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Natural Cubic spline regression: auto. knots")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
natural_cubic_spline_fit <-
lm(wage~ns(age, df=10),
data=wage_data_edit)
wage_data_edit$predict_wage <- predict(natural_cubic_spline_fit)
ggplot(data=wage_data_edit,
mapping=aes(x=age, y=wage))+
geom_point()+
labs(title="Natural Cubic spline regression: 1 auto. knot")+
geom_line(mapping=aes(y=predict_wage),
color="blue",
size=2)
terms(natural_cubic_spline_fit)
attr(terms(natural_cubic_spline_fit), "predvars")
terms(natural_cubic_spline_fit)
natural_cubic_spline_fit
