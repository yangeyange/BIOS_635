"\nAUC = ", round(auc(roc_obj),2))))+
theme_classic()
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
library(tidyverse)
library(ggpubr)
library(scales)
library(broom)
library(flextable)
library(scatterplot3d)
library(rgl)
library(caret)
library(reshape2)
library(GGally)
library(pROC)
heart_data <- read_csv(file="../data/heart_disease/Correct_Dataset.csv") %>%
mutate(heart_disease =
relevel(factor(ifelse(Target>0, "Yes", "No")),
ref = "No"))
scatter <-
ggplot(data = heart_data,
mapping = aes(x=MAX_Heart_Rate, y=Age,
color=heart_disease, shape=heart_disease))+
geom_point()+
labs(x="Max Heart Rate", color="Heart Disease",
shape="Heart Disease")+
theme_classic()+
theme(legend.position = "none")
box_heart_rate <-
ggplot(data=heart_data,
mapping = aes(x=heart_disease, y=MAX_Heart_Rate,
fill=heart_disease))+
geom_boxplot()+
labs(x="Heart Disease", fill="Heart Disease",
y="Max Heart Rate")+
theme_classic()+
theme(legend.position = "none")
box_age <-
ggplot(data=heart_data,
mapping = aes(x=heart_disease, y=Age,
fill=heart_disease))+
geom_boxplot()+
labs(x="Heart Disease", fill="Heart Disease",
y="Age (years)")+
theme_classic()+
theme(legend.position = "none")
ggarrange(plotlist=list(scatter, box_heart_rate, box_age),
nrow = 1)
heart_data <-
heart_data %>%
mutate(heart_disease_num =
ifelse(Target>0, 1, 0))
heart_data$prob_heart_disease_linear <-
predict(lm(heart_disease_num~MAX_Heart_Rate,
data=heart_data))
heart_data$prob_heart_disease_logit <-
predict(glm(heart_disease_num~MAX_Heart_Rate,
family=binomial(),
data=heart_data))
heart_data <-
heart_data %>%
mutate(prob_heart_disease_logistic =
exp(prob_heart_disease_logit)/(1+exp(prob_heart_disease_logit)))
scatter_linear <-
ggplot(data = heart_data,
mapping = aes(x=MAX_Heart_Rate, y=heart_disease_num))+
geom_point(aes(color=factor(heart_disease_num)))+
geom_line(mapping=aes(y=prob_heart_disease_linear))+
scale_y_continuous(breaks=seq(0, 1.2, 0.2))+
labs(x="Max Heart Rate", y="Heart Disease",
color="Heart Disease")+
theme_classic()+
theme(legend.position = "none")
scatter_logistic <-
ggplot(data = heart_data,
mapping = aes(x=MAX_Heart_Rate, y=heart_disease_num))+
geom_point(aes(color=factor(heart_disease_num)))+
geom_line(mapping=aes(y=prob_heart_disease_logistic))+
scale_y_continuous(breaks=seq(0, 1.2, 0.2))+
labs(x="Max Heart Rate", y="Heart Disease",
color="Heart Disease")+
theme_classic()+
theme(legend.position = "none")
ggarrange(plotlist=list(scatter_linear, scatter_logistic),
nrow = 1)
logit <- function(x){
log(x/(1-x))
}
exbit <- function(x){
exp(x)/(1+exp(x))
}
x_domain_p <- seq(0, 1, by=0.01)
x_domain_p[x_domain_p==0] <- 0.01
x_domain_p[x_domain_p==1] <- 0.99
y_logit <- logit(x_domain_p)
x_domain_logit <- y_logit
y_exbit <- exbit(x_domain_logit)
plot_data <- data.frame(x_domain_p, y_logit, x_domain_logit, y_exbit)
prob_to_logit_plot <-
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()+
xlab("Conditional Probability")+
ylab("Logit")+
labs(title = "Transforming probability to logit: logit(p)")+
theme_classic()+
theme(text = element_text(size=15))
logit_to_prob_plot <-
ggplot(data=plot_data,
mapping=aes(x=x_domain_logit, y=y_exbit))+
geom_line()+
xlab("Logit")+
ylab("Inverse Logit (Conditional Probability)")+
labs(title =
expression(paste("Transforming logit to probability: ",
frac(e^{x},1+e^{x}))))+
theme_classic()+
theme(text = element_text(size=15))
ggarrange(plotlist = list(prob_to_logit_plot, logit_to_prob_plot),
nrow=1)
glm_fit <-
glm(heart_disease~MAX_Heart_Rate+Age,
family=binomial(),
data=heart_data)
# Raw output
summary(glm_fit)
# Format output
tidy(glm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 3))),
term=fct_recode(factor(term),
"Intercept"="(Intercept)",
"Max Heart Rate"=
"MAX_Heart_Rate")) %>%
flextable() %>%
set_header_labels("term"="Variable",
"estimate"="Estimate",
"std.error"="Std. Error",
"statistic"="Z Statistic",
"p.value"="P-value") %>%
autofit()
# Format output
tidy(glm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 3))),
term=fct_recode(factor(term),
"Intercept"="(Intercept)",
"Max Heart Rate"=
"MAX_Heart_Rate")) %>%
flextable() %>%
set_header_labels("term"="Variable",
"estimate"="Estimate",
"std.error"="Std. Error",
"statistic"="Z Statistic",
"p.value"="P-value") %>%
autofit()
heart_data <- heart_data %>%
mutate(MAX_Heart_Rate_center =
MAX_Heart_Rate - mean(heart_data$MAX_Heart_Rate, na.rm = TRUE),
age_center =
Age - mean(heart_data$Age, na.rm = TRUE))
glm_fit_center <-
glm(heart_disease~MAX_Heart_Rate_center+age_center,
family=binomial(),
data=heart_data)
# Format output
tidy(glm_fit_center) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 3))),
term=fct_recode(factor(term),
"Intercept"="(Intercept)",
"Max Heart Rate centered"=
"MAX_Heart_Rate_center",
"Age (years) centered"=
"age_center")) %>%
flextable() %>%
set_header_labels("term"="Variable",
"estimate"="Estimate",
"std.error"="Std. Error",
"statistic"="Z Statistic",
"p.value"="P-value") %>%
autofit()
ggpairs(heart_data, columns =
c("Age", "Sex", "Chest_Pain", "Resting_Blood_Pressure", "Colestrol",
"MAX_Heart_Rate", "Exercised_Induced_Angina"),
ggplot2::aes(colour=heart_disease),
diag = list(continuous="barDiag"))
# Partition Data
set.seed(12)
train_test_indices <- createDataPartition(heart_data$heart_disease, p=0.6, list = FALSE)
heart_data_train <- heart_data[train_test_indices,]
heart_data_test <- heart_data[-train_test_indices,]
# Train
lm_fit <- glm(formula = heart_disease~Age+Sex+Chest_Pain+Resting_Blood_Pressure+Colestrol+
MAX_Heart_Rate+Exercised_Induced_Angina,
data = heart_data_train,
family = binomial())
summary(lm_fit)
# Add in test set predictions
heart_data_test$estimated_prob_heart_disease <-
predict(lm_fit, newdata=heart_data_test, type = "response")
# View test set probabilities
ggplot(data=heart_data_test,
mapping=aes(x=heart_disease, y=estimated_prob_heart_disease,
fill=heart_disease))+
geom_boxplot()+
labs(x="Heart Disease", y="Estimated Probability",
title = "Estimated probability of heart disease for test set\nusing logistic regression",
fill = "Heart Disease")+
theme_classic()+
theme(text = element_text(size=15))
# Add in test set predictions
heart_data_test <-
heart_data_test %>%
mutate(pred_heart_disease =
relevel(factor(ifelse(estimated_prob_heart_disease>0.5, "Yes", "No")),
ref = "No"))
# Compute confusion matrix
confusionMatrix(data = heart_data_test$pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")
# Add in train set predictions
heart_data_train$estimated_prob_heart_disease <-
predict(lm_fit, newdata=heart_data_train, type = "response")
heart_data_train <-
heart_data_train %>%
mutate(pred_heart_disease =
relevel(factor(ifelse(estimated_prob_heart_disease>0.5, "Yes", "No")),
ref = "No"))
# Compute confusion matrix
confusionMatrix(data = heart_data_train$pred_heart_disease,
reference = heart_data_train$heart_disease,
positive = "Yes")
# Using pROC, add ROC curve using estimated probabilities of heart disease in test set
roc_obj <-
roc(response = heart_data_test$heart_disease,
predictor = heart_data_test$estimated_prob_heart_disease)
# Print obj
roc_obj
# Plot curve
plot(roc_obj, main = paste0("ROC curve for heart disease prediction on test set\n AUC=",
round(auc(roc_obj),2)))
best_thres_data
roc(response = heart_data_test$heart_disease,
predictor = heart_data_test$estimated_prob_heart_disease)
# Print obj
roc_obj
# Return max Youden's index, with specificity and sensitivity
best_thres_data <-
data.frame(coords(roc_obj, x="best", best.method = c("youden", "closest.topleft")))
best_thres_data
best_thres_data$sensitivity
ggroc(roc_obj)+
geom_point(
data = best_thres_data,
mapping = aes(x=specificity, y=sensitivity), size=2, color="red")+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
color="darkgrey", linetype="dashed")+
geom_text(data = best_thres_data,
mapping=aes(x=specificity, y=0.95,
label=paste0("Sensitivity = ", round(sensitivity,2),
"\nSpecificity = ", round(specificity,2),
"\nAUC = ", round(auc(roc_obj),2))))+
theme_classic()
data_add_line <-
data.frame("sensitvity"=c(1-best_thres_data$best_thres_data$specificity,
best_thres_data$sensitivity),
"specificity"=c(best_thres_data$best_thres_data$specificity,
best_thres_data$specificity))
data_add_line
c(1-best_thres_data$best_thres_data$specificity,
best_thres_data$sensitivity)
c(1-best_thres_data$best_thres_data$specificity,
best_thres_data$sensitivity)
1-best_thres_data$best_thres_data$specificity
data_add_line <-
data.frame("sensitvity"=c(1-best_thres_data$specificity,
best_thres_data$sensitivity),
"specificity"=c(best_thres_data$specificity,
best_thres_data$specificity))
data_add_line
ggroc(roc_obj)+
geom_point(
data = best_thres_data,
mapping = aes(x=specificity, y=sensitivity), size=2, color="red")+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
color="darkgrey", linetype="dashed")+
geom_text(data = best_thres_data,
mapping=aes(x=specificity, y=0.95,
label=paste0("Sensitivity = ", round(sensitivity,2),
"\nSpecificity = ", round(specificity,2),
"\nAUC = ", round(auc(roc_obj),2))))+
geom_line(data=data_add_line,
mapping=aes(x=specificity, y=sensitivity))+
theme_classic()
data_add_line
ggroc(roc_obj)+
geom_point(
data = best_thres_data,
mapping = aes(x=specificity, y=sensitivity), size=2, color="red")+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
color="darkgrey", linetype="dashed")+
geom_text(data = best_thres_data,
mapping=aes(x=specificity, y=0.95,
label=paste0("Sensitivity = ", round(sensitivity,2),
"\nSpecificity = ", round(specificity,2),
"\nAUC = ", round(auc(roc_obj),2))))+
geom_line(data=data_add_line,
mapping=aes(x=specificity, y=sensitvity))+
theme_classic()
ggroc(roc_obj)+
geom_point(
data = best_thres_data,
mapping = aes(x=specificity, y=sensitivity), size=2, color="red")+
geom_point(x=best_thres_data$specificity,
y=1-best_thres_data$specificity,
size=2, color="red")+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
color="darkgrey", linetype="dashed")+
geom_text(data = best_thres_data,
mapping=aes(x=specificity, y=0.95,
label=paste0("Sensitivity = ", round(sensitivity,2),
"\nSpecificity = ", round(specificity,2),
"\nAUC = ", round(auc(roc_obj),2))))+
geom_line(data=data_add_line,
mapping=aes(x=specificity, y=sensitvity))+
theme_classic()
ggroc(roc_obj)+
geom_point(
data = best_thres_data,
mapping = aes(x=specificity, y=sensitivity), size=2, color="red")+
geom_point(mapping=aes(x=best_thres_data$specificity,
y=1-best_thres_data$specificity),
size=2, color="red")+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
color="darkgrey", linetype="dashed")+
geom_text(data = best_thres_data,
mapping=aes(x=specificity, y=0.95,
label=paste0("Sensitivity = ", round(sensitivity,2),
"\nSpecificity = ", round(specificity,2),
"\nAUC = ", round(auc(roc_obj),2))))+
geom_line(data=data_add_line,
mapping=aes(x=specificity, y=sensitvity))+
theme_classic()
ggroc(roc_obj)+
geom_point(
data = best_thres_data,
mapping = aes(x=specificity, y=sensitivity), size=2, color="red")+
geom_point(mapping=aes(x=best_thres_data$specificity,
y=1-best_thres_data$specificity),
size=2, color="red")+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
color="darkgrey", linetype="dashed")+
geom_text(data = best_thres_data,
mapping=aes(x=specificity, y=0.95,
label=paste0("Sensitivity = ", round(sensitivity,2),
"\nSpecificity = ", round(specificity,2),
"\nAUC = ", round(auc(roc_obj),2))))+
geom_line(data=data_add_line,
mapping=aes(x=specificity, y=sensitvity),
linetype="dashed")+
theme_classic()
ggroc(roc_obj)+
geom_point(
data = best_thres_data,
mapping = aes(x=specificity, y=sensitivity), size=2, color="red")+
geom_point(mapping=aes(x=best_thres_data$specificity,
y=1-best_thres_data$specificity),
size=2, color="red")+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
color="darkgrey", linetype="dashed")+
geom_text(data = best_thres_data,
mapping=aes(x=specificity, y=0.95,
label=paste0("Threshold = ", round(threshold,2),
"Sensitivity = ", round(sensitivity,2),
"\nSpecificity = ", round(specificity,2),
"\nAUC = ", round(auc(roc_obj),2))))+
geom_line(data=data_add_line,
mapping=aes(x=specificity, y=sensitvity),
linetype="dashed")+
theme_classic()
ggroc(roc_obj)+
geom_point(
data = best_thres_data,
mapping = aes(x=specificity, y=sensitivity), size=2, color="red")+
geom_point(mapping=aes(x=best_thres_data$specificity,
y=1-best_thres_data$specificity),
size=2, color="red")+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
color="darkgrey", linetype="dashed")+
geom_text(data = best_thres_data,
mapping=aes(x=specificity, y=0.95,
label=paste0("Threshold = ", round(threshold,2),
"\nSensitivity = ", round(sensitivity,2),
"\nSpecificity = ", round(specificity,2),
"\nAUC = ", round(auc(roc_obj),2))))+
geom_line(data=data_add_line,
mapping=aes(x=specificity, y=sensitvity),
linetype="dashed")+
theme_classic()
heart_data
dim(heart_data)
sum(heart_data$heart_disease=="YES")
heart_data$heart_disease
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
heart_data <- read_csv(file="../data/heart_disease/Correct_Dataset.csv") %>%
mutate(heart_disease =
relevel(factor(ifelse(Target>0, "Yes", "No")),
ref = "No"))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
library(tidyverse)
library(ggpubr)
library(scales)
library(broom)
library(flextable)
library(scatterplot3d)
library(rgl)
library(caret)
library(reshape2)
library(GGally)
library(pROC)
heart_data <- read_csv(file="../data/heart_disease/Correct_Dataset.csv") %>%
mutate(heart_disease =
relevel(factor(ifelse(Target>0, "Yes", "No")),
ref = "No"))
# Partition Data
set.seed(12)
train_test_indices <- createDataPartition(heart_data$heart_disease, p=0.6, list = FALSE)
heart_data_train <- heart_data[train_test_indices,]
heart_data_test <- heart_data[-train_test_indices,]
set.seed(12)
train_test_indices <- createDataPartition(heart_data$heart_disease, p=0.6, list = FALSE)
heart_data_train <- heart_data[train_test_indices,]
heart_data_test <- heart_data[-train_test_indices,]
# Train
lda_fit <- train(heart_disease~Age+Sex+Chest_Pain+Resting_Blood_Pressure+Colestrol+
MAX_Heart_Rate+Exercised_Induced_Angina,
data = heart_data_train, method = "lda")
lda_fit
summary(lda_fit)
predict(lda_fit, newdata=heart_data_test, type = "response")
predict(lda_fit, newdata=heart_data_test, type = "prob")
predict(lda_fit, newdata=heart_data_test, type = "prob")$Yes
# Add in test set predictions
heart_data_test$estimated_prob_heart_disease <-
predict(lda_fit, newdata=heart_data_test, type = "prob")$Yes
heart_data_test <-
heart_data_test %>%
mutate(pred_heart_disease =
relevel(factor(ifelse(estimated_prob_heart_disease>0.5, "Yes", "No")),
ref = "No"))
# Compute confusion matrix
confusionMatrix(data = heart_data_test$pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")
# Using pROC, add ROC curve using estimated probabilities of heart disease in test set
roc_obj <-
roc(response = heart_data_test$heart_disease,
predictor = heart_data_test$estimated_prob_heart_disease)
# Print obj
roc_obj
# Plot curve
plot(roc_obj, main = paste0("ROC curve for heart disease prediction on test set\n AUC=",
round(auc(roc_obj),2)))
# Add in train set predictions
heart_data_train$estimated_prob_heart_disease <-
predict(lda_fit, newdata=heart_data_train, type = "prob")$Yes
heart_data_train <-
heart_data_train %>%
mutate(pred_heart_disease =
relevel(factor(ifelse(estimated_prob_heart_disease>0.5, "Yes", "No")),
ref = "No"))
# Compute confusion matrix
confusionMatrix(data = heart_data_train$pred_heart_disease,
reference = heart_data_train$heart_disease,
positive = "Yes")
# Using pROC, add ROC curve using estimated probabilities of heart disease in test set
roc_obj <-
roc(response = heart_data_train$heart_disease,
predictor = heart_data_train$estimated_prob_heart_disease)
# Print obj
roc_obj
# Plot curve
plot(roc_obj, main = paste0("ROC curve for heart disease prediction on training set\n AUC=",
round(auc(roc_obj),2)))
# Train
qda_fit <- train(heart_disease~Age+Sex+Chest_Pain+Resting_Blood_Pressure+Colestrol+
MAX_Heart_Rate+Exercised_Induced_Angina,
data = heart_data_train, method = "qda")
# Add in test set predictions
heart_data_test$estimated_prob_heart_disease <-
predict(qda_fit, newdata=heart_data_test, type = "prob")$Yes
heart_data_test <-
heart_data_test %>%
mutate(pred_heart_disease =
relevel(factor(ifelse(estimated_prob_heart_disease>0.5, "Yes", "No")),
ref = "No"))
# Compute confusion matrix
confusionMatrix(data = heart_data_test$pred_heart_disease,
reference = heart_data_test$heart_disease,
positive = "Yes")
# Using pROC, add ROC curve using estimated probabilities of heart disease in test set
roc_obj <-
roc(response = heart_data_test$heart_disease,
predictor = heart_data_test$estimated_prob_heart_disease)
# Print obj
roc_obj
# Plot curve
plot(roc_obj, main = paste0("ROC curve for heart disease prediction on test set\n AUC=",
round(auc(roc_obj),2)))
